
<script>
  import { $, $$ } from '/@nue/kit/island.js'
</script>

<label @name="zoom" class="zoom">
  <span>zoom</span>
  <input type="range" min="0" value="2" :max="sizes.length -1" @input="zoom">

  <script>
    sizes = [0.5, 1, 1.5, 3, 6, 10, 16]

    zoom(e) {
      const px = this.sizes[e.target.value]
      $$('.columns').forEach(el => el.style.fontSize = px + 'px')

      // big & small classes
      const cls = $('.content-flex').classList
      cls.toggle('big-zoom', px >= 10)
      cls.toggle('small-zoom', px == 1)
    }
  </script>
</label>


<section @name="view-src">
  <div class="tabs secondary-tabs">
    <a :for="name, i in names" :class="{ selected: i == index }" @click="navigate(name, i)">
      { name } { suffix.replace('src', 'source') }</a>
  </div>

  <div class="canvas" name="canvas"></div>

  <script>
    index = 0

    async load(name) {
      this.canvas.innerHTML = '<h2>Loading...</h2>'
      const response = await fetch(`code/${name.toLowerCase()}-${this.suffix}.html?i=1`)
      this.canvas.innerHTML = await response.text()
    }

    mounted(args) {
      this.suffix = args.suffix
      this.canvas = args.$refs.canvas
      const names = this.names = args.names

      if (args.other) {
        const hash = location.hash.slice(1)
        let i = names.indexOf(hash)
        if (i < 0) i = 0
        this.index = i
        this.load(names[i])
        vs.textContent = names[i]

      } else {
        this.load('Nue')
      }
    }

    navigate(name, i) {
      this.index = i
      this.load(name).then(() => {
        vs.textContent = name
        location.hash = name
      })
    }
  </script>

</section>

