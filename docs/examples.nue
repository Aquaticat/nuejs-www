<script>
  import { lib as samples } from './examples.js'
  import createApp from '/@nue/js/nue.js'
</script>

<!-- demo wrapper & mounter -->
<section @name="demo" class="demo">
  <div ref="root"/>

  <script>
    mounted(args) {
      const name = args._
      const comp = samples.find(el => el.name == name)
      if (comp) createApp(comp, args, lib).mount(this.$refs.root)
      else console.info('Component not found', name)
    }
  </script>
</section>


<!-- hello world -->
<h3 @name="hello-world">
  Hello {name}!
  <script>name = 'world'</script>
</h3>

<!-- counter -->
<button @name="counter" @click="count++">
  Clicked { count } { count == 1 ? 'time' : 'times' }
  <script>count = 0</script>
</button>


<!-- counter 2 -->
<div @name="counter2">
  <h3>You clicked {count} times!</h3>
  <button @click="count--">Decrement</button>
  <button @click="count++">Increment</button>
  <script>count = 0</script>
</div>


<!-- direct HTML render -->
<button @name="html-button">
  {{ label }}
  <script>
    label = 'Hello, <u>Underlined</u>'
  </script>
</button>


<!-- props demo -->
<h3 @name="props-demo">
  { a } + { b } = <sum :a="a" :b="b"/>
  <script>
    // instance variables
    a = 10
    b = 100
  </script>
</h3>

<!-- nested sum component -->
<span @name="sum">
  { a + b }
</span>


<!-- conditionals -->
<button @name="if-counter" @click="count++">
  <p :if="!count">No clicks yet</p>
  <p :else-if="count == 1">First click!</p>
  <p :else-if="count == 2">Nice. Another one.</p>
  <p :else>Clicks: { count }</p>
  <script>count = 0</script>
</button>


<!-- mouse tracking -->
<div @name="mouse-tracking" @mousemove="track" style="height: { h }em">
  Position: { x } x { y }

  <script>
    h = 10
    x = 0
    y = 0

    track(event) {
      this.x = event.clientX
      this.y = event.clientY
    }
  </script>
</div>


<!-- simple loop -->
<figure @name="simple-loop">
  <img :for="img in images" :src="/demo/img/{img}.jpg">
  <script>
    images = ['popcorn', 'peas', 'tomatoes']
  </script>
</figure>


<!-- reactive loop -->
<div @name="reactive-loop">

  <p>
    <button @click="addFruit">Add</button>
    <button @click="images.pop()" :disabled="!images[4]">Remove</button>
  </p>

  <img :for="img in images" :src="/demo/img/{img}.jpg">

  <script>
    images = ['popcorn', 'peas', 'lemons', 'tomatoes']

    addFruit() {
      const img = this.images[Math.floor(Math.random() * 4)]
      this.images.push(img)
    }
  </script>
</div>


<!-- fetch fruits -->
<figure @name="fetch-fruits">
  <img :for="img in images" :src="/demo/img/{img}.jpg">

  <figcaption>
    <button @click="fetchFruits">Fetch more fruits</button>
  </figcaption>

  <script>
    images = ['lemons', 'peas']

    async fetchFruits() {
      const req = await fetch('fruits.json')
      const fruits = await req.json()
      fruits.forEach(this.images.push)
    }
  </script>
</figure>


<!-- "Write less code": https://svelte.dev/blog/write-less-code -->
<form @name="input-demo" class="input-demo">
  <input type="number" :value="a" @change="a = $event.target.value">
  <input type="number" :value="b" @change="b = $event.target.value">

  <h3>{a} + {b} = {1*a + 1*b}</h3>

  <script>
    a = 1
    b = 2
  </script>
</form>


<!-- callbacks: github.com/nuejs/nuejs/issues/2#issuecomment-1728968468  -->
<div @name="callback-demo">

  <!-- callback method given as argument -->
  <child-button :onpress="tellMe" foo="10"/>

  <script>
    // this callback method is called when child button is pressed
    tellMe(msg) {
      console.info('They said', msg)
    }
  </script>
</div>

<!-- child -->
<button @name="child-button" @click="onpress('Hello!!')">
  Tell them
</button>


<!-- https://codesandbox.io/s/pedantic-mclaren-nqpjl5?file=/src/App.js -->
<ul @name="fractal" class="fractal { class }">
  <li :for="am in rows"><b :for="el in Array(am).fill(0)"/></li>
  <script>rows = Array(22).fill(0).map((_, i) => i ? 3 * i : 1)</script>
</ul>


<!-- multiple fractals -->
<div @name="fractals" class="fractals">
  <fractal class="first"/>
  <fractal class="second"/>
  <fractal class="third"/>
</div>


<!-- canvas paint -->
<canvas @name="canvas-paint" @mousemove="mousemove">
  <script>
    last = [0, 0]

    mounted() {
      const { root } = this
      const ctx = this.ctx = root.getContext('2d')
      root.width = 655; root.height = 500
      ctx.fillStyle = 'white'
      ctx.lineCap = 'round'
      ctx.lineWidth = 20
      this.recolor()
      this.clear()
    }

    // reset canvas in every five seconds
    clear() {
      this.ctx.fillRect(0, 0, this.root.width, this.root.height)
      setTimeout(_ => this.clear(), 5000)
    }

    // reset Nue brand color every second
    recolor() {
      const colors = ['00c2ff', 'e2e8f0', 'fb00e2', '000']
      this.ctx.strokeStyle = `#${colors[Math.floor(Math.random() * 4)]}`
      setTimeout(_ => this.recolor(), 1000)
    }

    // draw the line
    mousemove(e) {
      const { ctx, last } = this
      const to = [e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop]
      ctx.beginPath(); ctx.moveTo(...last); ctx.lineTo(...to); ctx.stroke()
      this.last = to
    }
  </script>

</canvas>


<!-- form example -->
<form @name="form-fields" class="flexy">

  <label>
    <h4>Name</h4>
    <input name="name">
  </label>

  <label>
    <h4>Birthday</h4>
    <input type="date">
  </label>

  <label>
    <h4>Special skill</h4>
    <select name="skill">
      <option>Front of the frontend</option>
      <option>Back of the frontend</option>
      <option>All of frontend</option>
      <option>Backend development</option>
      <option>Full stack</option>
    </select>
  </label>

  <label>
    <h4>Fatique level</h4>
    <input type="range">
  </label>

</form>



<div @name="line-graph">
  <h3>It's here</h3>
  <svg viewBox="0 0 100 100">
    <line stroke-width="10" x1="0" y1="80" x2="100" y2="20" stroke="black" />
  </svg>
  <script>
    constructor() {
      console.info('masssive')
    }
  </script>
</div>


<!-- update() method -->
<div @name="user-update" class="user">
  <img :src="user.avatar">
  <h3>{ user.name }</h3>
  <p>{ user.email }</p>

  <button @click="loadJane" :disabled="is_loaded">Load Jane</button>

  <script>
    user = {
      avatar: '/demo/img/face-4.jpg',
      email: 'john@acme.org',
      name: 'John Doe',
    }

    async loadJane() {
      const req = await fetch('/docs/nuejs/examples/jane.json')
      this.user = await req.json()
      this.is_loaded = true
      this.update()
    }
  </script>
</div>
